node ("maven") {

   // download and configure all common cicd stuff
   dir('app') {


      // ===============================================================================
      // SCRIPT Declarations (from OCP 3.6 use the Pipeline BuildConfig ENV Variables)
      // ===============================================================================


      APP_GIT_URL  = "https://github.com/skoussou/multi-xpaas-micros-story.git"
      CONTEXT_PATH = "test-dm-uae"

      APP_TEMPLATE = "test-dm-uae/openshift/templates/decisions-server64-basic-s2i-template-PAYMENTS-binary.yml"
      NEXUS_URL = "http://10.25.28.72:8081/repository/maven-releases/"
      DEV_PROJECT = "poc"

      APP_NAME = "uaex-rules-api"
      IMAGESTREAM_PROJECT = "poc"

      APP_VERSION="1.0.0"

     //CUSTOM_TEMPLATE_PARAMETERS = "-p KIE_CONTAINER_DEPLOYMENT=payments=com.redhat.consulting:test-dm-uae:1.0.0 -p SOURCE_REPOSITORY_URL=https://github.com/skoussou/multi-xpaas-micros-story.git -p SOURCE_REPOSITORY_REF=master -p CONTEXT_DIR=test-dm-uae -p appargs=kie.maven.settings.custom=${NEXUS_URL} -p IMAGESTREAM_PROJECT=poc"

CUSTOM_TEMPLATE_PARAMETERS = "-p KIE_CONTAINER_DEPLOYMENT=payments=com.redhat.consulting:test-dm-uae:1.0.0 -p SOURCE_REPOSITORY_URL=https://github.com/skoussou/multi-xpaas-micros-story.git -p SOURCE_REPOSITORY_REF=master -p CONTEXT_DIR=test-dm-uae -p IMAGESTREAM_PROJECT=poc -l app=${APP_NAME}"


//    NEXUS_URL = "http://nexus.sos.eu/content/repositories/redhat-internal-dev-demo-release"

//      QA_PROJECT = "sos-online-qa"
//      INT_PROJECT = "sos-online-int"
//      STAGE_PROJECT = "sos-online-stage"
//      PROD_PROJECT = "sos-online-prod"


      echo '============================================================'
      echo 'Download xPAAS apps and ci/cd required files'

      git branch: "master", url: "${APP_GIT_URL}"

      sh "pwd"
      sh "ls -la"
      echo "${CONTEXT_PATH}/openshift/pipeline/functions/apply-template.groovy"


      //echo "COMMAND PWD"
      //sh "pwd"

      // load openshift-utils functions (using this path as convention.. define a env var if desired...)
      openshiftUtils = load("test-dm-uae/openshift/pipeline/functions/openshift-utils.groovy")

//        test = load("test-dm-uae/openshift/pipeline/functions/apply-template.groovy") 
//test.applyTemplate("${DEV_PROJECT}", "${APP_TEMPLATE}", "${APP_NAME}", "${APP_VERSION}", "${APP_NAME}", "${CUSTOM_TEMPLATE_PARAMETERS}" , [])
                             

      // load groovy functions
     // newman = load "test-dm-uae/openshift/pipeline/functions/openshift-utils.groovy"
      echo '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'

   }  
   // define maven with custom settings.xml (using this path as convention.. define a env var if desired...)in
   //def mvnCmd = "mvn -s ${WORKSPACE}/cicd/maven/settings.xml" 


   stage("Build & Test KJAR") {

      dir('app') {

          dir ("${CONTEXT_PATH}") {
	         // Build, package, test and deploy with custom settings.xml pointing to corporate NEXUS
                   sh "mvn deploy -s ./openshift/configuration/settings.xml"

                 // Capture KJAR GAV Details to use for its download from NEXUS
                 // extract info from pom.xml to build NEXUS_ARTIFACT_PATH

                 def pom = readMavenPom file: "pom.xml"
                 APP_VERSION = pom.version
   
                 def artifactId = pom.artifactId
                 def groupId = pom.groupId.replace(".","/")
  
                 // removed as in BRMS it is KJAR
                 //def packaging = pom.packaging
                 def packaging = "jar"
            
                 echo "APP_VERSION = ${APP_VERSION}"
                 echo "artifactId = ${artifactId}"
                 echo "groupId = ${groupId}"
                 echo "packaging = ${packaging}"

  
                 NEXUS_ARTIFACT_PATH = "${groupId}/${artifactId}/${APP_VERSION}/${artifactId}-${APP_VERSION}.${packaging}"
                 echo "NEXUS ${APP_NAME} ARTFIFACT Location at ${NEXUS_ARTIFACT_PATH}"
          }

          stash name: "app-template", includes: "${APP_TEMPLATE }"
      }  
   }

}

node ("nodejs") {


   
   // get app template back
   unstash "app-template" 
   
   stage("Build ${APP_NAME} container") {
      
        // no need to define a cluster if we have just one defined and it is the one where Jenkins is running 
        openshift.withCluster() { 

            //openshift.doAs( 'jenkins' ) {
            groupId="com/redhat/consulting"
            artifactId="test-dm-uae"
            packaging="jar"

            NEXUS_ARTIFACT_PATH = "${groupId}/${artifactId}/${APP_VERSION}/${artifactId}-${APP_VERSION}.${packaging}"

     openshiftUtils.applyTemplate("${DEV_PROJECT}", "${APP_TEMPLATE}", "${APP_NAME}", "${APP_VERSION}", "${APP_NAME}", "${CUSTOM_TEMPLATE_PARAMETERS}" , [])
                //openshiftUtils.startBuildFromFile("${DEV_PROJECT}", "${APP_NAME}", "http://10.25.28.72:8081/repository/maven-releases/${NEXUS_ARTIFACT_PATH}", true) 
     openshiftUtils.startBuildFromFile("${DEV_PROJECT}", "${APP_NAME}", "${NEXUS_URL}/${NEXUS_ARTIFACT_PATH}", true) 
            //}
        }
   }


   stage("Deploy in ${DEV_PROJECT} ${APP_NAME}  ") {

     // openshift.withCluster() { 
    //     openshiftUtils.deploy("${DEV_PROJECT}", "${APP_NAME}")
     // } 
  }
}
