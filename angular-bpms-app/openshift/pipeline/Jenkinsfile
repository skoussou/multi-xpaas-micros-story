node ("maven") {

   // download and configure all common cicd stuff
   dir('app') {

      // ===============================================================================
      // SCRIPT Declarations (from OCP 3.6 use the Pipeline BuildConfig ENV Variables)
      // ===============================================================================


      APP_GIT_URL  = "https://github.com/skoussou/multi-xpaas-micros-story.git"
      APP_GIT_REPO_BRANCH = "master"
      CONTEXT_PATH = "angular-bpms-app"

      APP_TEMPLATE = "../openshift/templates/eap-ui-web-angular-template.yml"

      //MAVEN_MIRROR_URL = "http://10.25.28.72:8081/repository/maven-public/"
      NEXUS_URL = "http://nexus-poc.192.168.42.210.nip.io/nexus/content/repositories/releases/"

      APP_NAME = "uaex-payments-ui"
      IMAGESTREAM_PROJECT = "poc"

      DEV_PROJECT = "poc"
//      QA_PROJECT = "sos-online-qa"
//      INT_PROJECT = "sos-online-int"
//      STAGE_PROJECT = "sos-online-stage"
//      PROD_PROJECT = "sos-online-prod"

      SETTINGS_XML_NAME= "settings.xml"


      CUSTOM_TEMPLATE_PARAMETERS = "-p SOURCE_REPOSITORY_URL=${APP_GIT_URL} -p SOURCE_REPOSITORY_REF=${APP_GIT_REPO_BRANCH} -p CONTEXT_DIR=${CONTEXT_PATH} -p appargs=kie.maven.settings.custom=${NEXUS_URL} -p REGISTRY=172.30.190.52:5000 -p IMAGESTREAM_PROJECT=sos-online-dev"


      echo '============================================================'
      echo 'Download xPAAS apps and ci/cd required files'

      git branch: "${APP_GIT_REPO_BRANCH}", url: "${APP_GIT_URL}"

      // load openshift-utils functions (using this path as convention.. define a env var if desired...)
      openshiftUtils = load("dm-micro/openshift/pipeline/functions/openshift-utils.groovy")
                             

      // load groovy functions
     // newman = load "dm-micro/openshift/pipeline/functions/openshift-utils.groovy"
      echo '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'

   }  


   stage("Clone & Build") {

      dir('app') {

        //stash name: "app-template", includes: "openshift/templates/processserver64-mysql-s2i-protected-scm-ocp-no-probe-binary-build.yml"

         //dir ('sos-online-processes-technical') {
           // Deploy the depending of KJAR technical JARs with custom settings.xml pointing to corporate NEXUS
           //sh "mvn deploy -DskipTests -s ../configuration/settings.xml"
         //}


        //  dir ('sos-online-processes') {
        //
        //   // Build, package and test with custom settings.xml pointing to corporate NEXUS
        //   sh "mvn clean package -s ../configuration/settings.xml"
        //   //sh "mvn  deploy -Dnexus.url=${NEXUS_URL} -s ../configuration/settings.xml"
        //
        // }



	       dir ('angular-bpms-app') {

                  echo "COMMAND PWD"
                  sh "pwd"

                  echo "COMMANDA ls -la"
                  sh "ls -la src/main/angular-bpms-app/"
                  //sh "ls angular-bpms-app/openshift/pipeline/functions"
                  sh "cat pom.xml"

	         // Build, package and test with custom settings.xml pointing to corporate NEXUS
	         //sh "mvn clean package -s ../configuration/settings.xml"
                   sh "mvn clean package"
	       }
      }  
   }


   stage("Push Artifact to Nexus") {

   }


node ("nodejs") {
   
      echo '-------------'
      echo ' DEPLOY in DEV'
      echo '-------------'

      dir('app') {

      } 
   }


   stage("DEPLOY in DEV [${DEV_PROJECT}] ") {

     // openshift.withCluster() { 
     //    openshiftUtils.deploy("${DEV_PROJECT}", "${APP_NAME}")
     // } 

      echo '-------------'
      echo ' DEPLOY in DEV'
      echo '-------------'

      dir('app') {

      } 
   }

   stage("QA TESTing") {

      echo '-------------'
      echo ' QA TEST TBD'
      echo '-------------'

      dir('app') {

      }  
   }

   stage("DEPLOY in [${INT_PROJECT}] ") {

      //openshift.withCluster() { 
      //   openshiftUtils.deploy("${INT_PROJECT}", "${APP_NAME}")
      //}     
   }

   stage("INT TESTing ") {


      echo '-------------'
      echo ' RUN INT TEST '
      echo '-------------'

      dir('app') {

      }  
   }

   stage("DEPLOY in [${STAGE_PROJECT}] ") {

      //openshift.withCluster() { 
      //   openshiftUtils.deploy("${STAGE_PROJECT}", "${APP_NAME}")
      //}  
   }

   stage("RUN PERF TESTting ") {

      echo '-------------'
      echo ' RUN PERF TEST '
      echo '-------------'

      dir('app') {

      }  
   }

   stage("RUN UAT TESTting ") {

      echo '-------------'
      echo ' RUN UAT TEST '
      echo '-------------'

      dir('app') {

      }  
   }



   stage("DEPLOY in PROD") {

      echo '-------------'
      echo ' Copy image in PROD Cluster Registry'
      echo ' Copy image in PROD Namespace'
      echo '-------------'

      dir('app') {

      }  
   }



}
